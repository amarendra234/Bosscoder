/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // void countTotalpath(TreeNode* root,int &ans,int sum){
    //          if(root==NULL){
    //             return;
    //          }
    //          pathSum(root,ans,sum,0);
    //          countTotalpath(root->left,ans,sum);
    //          countTotalpath(root->right,ans,sum);
    //    }
       void pathSum(TreeNode* root,int &ans,int sum,long long int curr_sum,unordered_map<long,long>umap){
         if(root==NULL){
            return;
         }
         curr_sum+=root->val;
         if(curr_sum==sum){
            ans++;
         }
         if(umap.find(curr_sum-sum)!=umap.end()){
            ans+=umap[curr_sum-sum];
         }
         umap[curr_sum]++;
         pathSum(root->left,ans,sum,curr_sum,umap);
         pathSum(root->right,ans,sum,curr_sum,umap);
     }
    int pathSum(TreeNode* root, int targetSum) {
         int ans=0;
         unordered_map<long,long>umap;
        pathSum(root,ans,targetSum,0,umap);
        return ans;
    }
};
