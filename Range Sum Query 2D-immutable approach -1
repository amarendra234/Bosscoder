// M*q solution where each row treated as individual prefix sum
class NumMatrix {
public:
    vector<vector<int>>mat;
    NumMatrix(vector<vector<int>>& matrix) {
        
        int row=matrix.size();
        int col=matrix[0].size();
         mat.resize(row); 
        for (int i = 0; i < row; ++i) {
           mat[i].resize(col); 
        }
        for(int i=0;i<row;i++){
            for(int j=1;j<col;j++){
                matrix[i][j]+=matrix[i][j-1];
            }
        }
           for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                mat[i][j]=matrix[i][j];
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int ans=0;
        for(int i=row1;i<=row2;i++){
            if(col1!=0){
                ans+=(mat[i][col2]-mat[i][col1-1]);
            }else{
                ans+=mat[i][col2];
            }
        }
        return ans;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
